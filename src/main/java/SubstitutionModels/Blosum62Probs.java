package SubstitutionModels;


/**
              A     R     N     D     C     Q     E     G     H     I     L     K     M     F     P     S     T     W     Y     V
        A 0.361 0.030 0.026 0.031 0.014 0.029 0.048 0.062 0.011 0.032 0.052 0.038 0.015 0.019 0.034 0.064 0.049 0.006 0.015 0.064
        R 0.050 0.357 0.034 0.035 0.005 0.045 0.055 0.032 0.022 0.022 0.043 0.116 0.011 0.014 0.025 0.041 0.037 0.007 0.020 0.030
        N 0.050 0.040 0.321 0.087 0.007 0.037 0.055 0.063 0.026 0.018 0.027 0.059 0.010 0.014 0.025 0.064 0.048 0.005 0.021 0.023
        D 0.046 0.031 0.066 0.396 0.004 0.034 0.100 0.046 0.018 0.012 0.022 0.048 0.007 0.010 0.030 0.054 0.039 0.004 0.013 0.020
        C 0.083 0.017 0.021 0.014 0.463 0.015 0.017 0.028 0.009 0.037 0.054 0.013 0.014 0.028 0.016 0.043 0.038 0.004 0.018 0.068
        Q 0.066 0.062 0.043 0.052 0.006 0.258 0.099 0.035 0.029 0.022 0.043 0.079 0.013 0.016 0.028 0.047 0.045 0.005 0.018 0.034
        E 0.063 0.043 0.037 0.089 0.004 0.057 0.354 0.036 0.017 0.019 0.030 0.067 0.009 0.011 0.030 0.044 0.042 0.005 0.015 0.028
        G 0.070 0.022 0.036 0.035 0.006 0.017 0.031 0.574 0.010 0.011 0.019 0.029 0.006 0.010 0.022 0.044 0.027 0.004 0.010 0.017
        H 0.041 0.048 0.050 0.044 0.006 0.047 0.049 0.031 0.350 0.022 0.043 0.053 0.012 0.027 0.023 0.039 0.033 0.009 0.045 0.028
        I 0.045 0.019 0.013 0.012 0.009 0.014 0.021 0.014 0.008 0.334 0.153 0.022 0.031 0.039 0.017 0.019 0.034 0.008 0.021 0.167
        L 0.048 0.024 0.013 0.014 0.009 0.017 0.021 0.016 0.011 0.100 0.423 0.024 0.041 0.053 0.016 0.021 0.029 0.009 0.024 0.087
        K 0.055 0.101 0.044 0.047 0.003 0.050 0.075 0.037 0.021 0.022 0.037 0.317 0.011 0.011 0.032 0.042 0.044 0.004 0.017 0.030
        M 0.058 0.027 0.021 0.020 0.010 0.023 0.026 0.022 0.013 0.086 0.175 0.030 0.244 0.047 0.016 0.028 0.041 0.011 0.026 0.076
        F 0.038 0.016 0.014 0.014 0.010 0.014 0.017 0.018 0.015 0.055 0.116 0.016 0.024 0.401 0.013 0.022 0.023 0.022 0.095 0.057
        P 0.063 0.028 0.024 0.037 0.005 0.022 0.043 0.037 0.012 0.022 0.032 0.040 0.007 0.012 0.485 0.044 0.036 0.005 0.014 0.032
        S 0.096 0.036 0.049 0.055 0.011 0.030 0.050 0.059 0.016 0.019 0.034 0.043 0.010 0.016 0.036 0.294 0.088 0.005 0.017 0.036
        T 0.074 0.033 0.037 0.040 0.010 0.030 0.048 0.037 0.014 0.036 0.047 0.045 0.016 0.017 0.029 0.089 0.315 0.005 0.016 0.062
        W 0.039 0.024 0.016 0.015 0.004 0.014 0.022 0.022 0.014 0.032 0.061 0.016 0.016 0.066 0.015 0.020 0.022 0.477 0.071 0.034
        Y 0.036 0.028 0.025 0.021 0.007 0.018 0.026 0.020 0.028 0.034 0.061 0.027 0.015 0.108 0.017 0.026 0.025 0.027 0.408 0.043
        V 0.074 0.021 0.014 0.016 0.014 0.017 0.024 0.018 0.009 0.136 0.109 0.024 0.022 0.033 0.020 0.028 0.048 0.007 0.022 0.344

 */

final public class Blosum62Probs {

    /*
     * Array representation of Blosum-62 matrix
     * Refer to above matrix for corrseponding amino acids
     * i.e. score(A, R) corresponds to  matrix[0][1]=matrix[1][0]=-1
    */
    private static final double[][] matrix = {
            {0.361, 0.030, 0.026, 0.031, 0.014, 0.029, 0.048, 0.062, 0.011, 0.032, 0.052, 0.038, 0.015, 0.019, 0.034, 0.064, 0.049, 0.006, 0.015, 0.064},
            {0.050, 0.357, 0.034, 0.035, 0.005, 0.045, 0.055, 0.032, 0.022, 0.022, 0.043, 0.116, 0.011, 0.014, 0.025, 0.041, 0.037, 0.007, 0.020, 0.030},
            {0.050, 0.040, 0.321, 0.087, 0.007, 0.037, 0.055, 0.063, 0.026, 0.018, 0.027, 0.059, 0.010, 0.014, 0.025, 0.064, 0.048, 0.005, 0.021, 0.023},
            {0.046, 0.031, 0.066, 0.396, 0.004, 0.034, 0.100, 0.046, 0.018, 0.012, 0.022, 0.048, 0.007, 0.010, 0.030, 0.054, 0.039, 0.004, 0.013, 0.020},
            {0.083, 0.017, 0.021, 0.014, 0.463, 0.015, 0.017, 0.028, 0.009, 0.037, 0.054, 0.013, 0.014, 0.028, 0.016, 0.043, 0.038, 0.004, 0.018, 0.068},
            {0.066, 0.062, 0.043, 0.052, 0.006, 0.258, 0.099, 0.035, 0.029, 0.022, 0.043, 0.079, 0.013, 0.016, 0.028, 0.047, 0.045, 0.005, 0.018, 0.034},
            {0.063, 0.043, 0.037, 0.089, 0.004, 0.057, 0.354, 0.036, 0.017, 0.019, 0.030, 0.067, 0.009, 0.011, 0.030, 0.044, 0.042, 0.005, 0.015, 0.028},
            {0.070, 0.022, 0.036, 0.035, 0.006, 0.017, 0.031, 0.574, 0.010, 0.011, 0.019, 0.029, 0.006, 0.010, 0.022, 0.044, 0.027, 0.004, 0.010, 0.017},
            {0.041, 0.048, 0.050, 0.044, 0.006, 0.047, 0.049, 0.031, 0.350, 0.022, 0.043, 0.053, 0.012, 0.027, 0.023, 0.039, 0.033, 0.009, 0.045, 0.028},
            {0.045, 0.019, 0.013, 0.012, 0.009, 0.014, 0.021, 0.014, 0.008, 0.334, 0.153, 0.022, 0.031, 0.039, 0.017, 0.019, 0.034, 0.008, 0.021, 0.167},
            {0.048, 0.024, 0.013, 0.014, 0.009, 0.017, 0.021, 0.016, 0.011, 0.100, 0.423, 0.024, 0.041, 0.053, 0.016, 0.021, 0.029, 0.009, 0.024, 0.087},
            {0.055, 0.101, 0.044, 0.047, 0.003, 0.050, 0.075, 0.037, 0.021, 0.022, 0.037, 0.317, 0.011, 0.011, 0.032, 0.042, 0.044, 0.004, 0.017, 0.030},
            {0.058, 0.027, 0.021, 0.020, 0.010, 0.023, 0.026, 0.022, 0.013, 0.086, 0.175, 0.030, 0.244, 0.047, 0.016, 0.028, 0.041, 0.011, 0.026, 0.076},
            {0.038, 0.016, 0.014, 0.014, 0.010, 0.014, 0.017, 0.018, 0.015, 0.055, 0.116, 0.016, 0.024, 0.401, 0.013, 0.022, 0.023, 0.022, 0.095, 0.057},
            {0.063, 0.028, 0.024, 0.037, 0.005, 0.022, 0.043, 0.037, 0.012, 0.022, 0.032, 0.040, 0.007, 0.012, 0.485, 0.044, 0.036, 0.005, 0.014, 0.032},
            {0.096, 0.036, 0.049, 0.055, 0.011, 0.030, 0.050, 0.059, 0.016, 0.019, 0.034, 0.043, 0.010, 0.016, 0.036, 0.294, 0.088, 0.005, 0.017, 0.036},
            {0.074, 0.033, 0.037, 0.040, 0.010, 0.030, 0.048, 0.037, 0.014, 0.036, 0.047, 0.045, 0.016, 0.017, 0.029, 0.089, 0.315, 0.005, 0.016, 0.062},
            {0.039, 0.024, 0.016, 0.015, 0.004, 0.014, 0.022, 0.022, 0.014, 0.032, 0.061, 0.016, 0.016, 0.066, 0.015, 0.020, 0.022, 0.477, 0.071, 0.034},
            {0.036, 0.028, 0.025, 0.021, 0.007, 0.018, 0.026, 0.020, 0.028, 0.034, 0.061, 0.027, 0.015, 0.108, 0.017, 0.026, 0.025, 0.027, 0.408, 0.043},
            {0.074, 0.021, 0.014, 0.016, 0.014, 0.017, 0.024, 0.018, 0.009, 0.136, 0.109, 0.024, 0.022, 0.033, 0.020, 0.028, 0.048, 0.007, 0.022, 0.344}};


    private static int getIndex(char a) {

        // check for upper and lowercase characters
        switch ((String.valueOf(a)).toUpperCase().charAt(0)) {
            case 'A': return 0;
            case 'R': return 1;
            case 'N': return 2;
            case 'D': return 3;
            case 'C': return 4;
            case 'Q': return 5;
            case 'E': return 6;
            case 'G': return 7;
            case 'H': return 8;
            case 'I': return 9;
            case 'L': return 10;
            case 'K': return 11;
            case 'M': return 12;
            case 'F': return 13;
            case 'P': return 14;
            case 'S': return 15;
            case 'T': return 16;
            case 'W': return 17;
            case 'Y': return 18;
            case 'V': return 19;
            default: return -1;
        }
    }



    public static double getDistance(char a1, char a2) {
        return matrix[getIndex(a1)][getIndex(a2)];
    }

    public static double[][] getMatrix(){
        return matrix;
    }
}